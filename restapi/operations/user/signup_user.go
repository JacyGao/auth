// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SignupUserHandlerFunc turns a function with the right signature into a signup user handler
type SignupUserHandlerFunc func(SignupUserParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SignupUserHandlerFunc) Handle(params SignupUserParams) middleware.Responder {
	return fn(params)
}

// SignupUserHandler interface for that can handle valid signup user params
type SignupUserHandler interface {
	Handle(SignupUserParams) middleware.Responder
}

// NewSignupUser creates a new http.Handler for the signup user operation
func NewSignupUser(ctx *middleware.Context, handler SignupUserHandler) *SignupUser {
	return &SignupUser{Context: ctx, Handler: handler}
}

/*SignupUser swagger:route POST /user/signup user signupUser

Sign up a new user

*/
type SignupUser struct {
	Context *middleware.Context
	Handler SignupUserHandler
}

func (o *SignupUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSignupUserParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
